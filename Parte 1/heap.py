"""Implementacion de min heap"""import randomERR_MSG=[    ('ERROR: INVALID INDEX AT SWAPPING'),]def domin(a,b):    if a < b:        return 1    return 0def domax(a,b):    if a > b:        return 1    return 0compDict = {    'min': domin,    'max': domax}class heap:    def __init__(self,op):        self.l = 0        self.array = []        self.comparator=str(op)    def len(self):        return self.l    def change_len(self,a):        self.l=a    def swap(self,a,b):        l=self.len()        if a >= l or b >= l:            print(ERR_MSG[0])            return        aux=self.array[a]        self.array[a]=self.array[b]        self.array[b]=aux    def left_child(self,i):        return 2*i+1    def right_child(self,i):        return 2*i+2    def parent(self,i):        if not (i%2):            return int((i-2)/2)        return int((i-1)/2)    def top_down(self,i):        l=self.len()        left=self.left_child(i)        right=self.right_child(i)        aux = i        if left < l and compDict[self.comparator](self.array[left],self.array[i]):            aux=left        if right < l and compDict[self.comparator](self.array[right],self.array[aux]):            aux=right        if aux != i:            self.swap(i,aux)            self.top_down(aux)    def bottom_up (self):        child=self.len()-1        root=self.parent(child)        while child > 0 and root >= 0 and compDict[str(self.comparator)](self.array[child],self.array[root]):            self.swap(child,root)            child=root            root=self.parent(child)        return child    def append (self, a):        self.array.append(a)        n=self.len()        self.change_len(n+1)        aux=self.bottom_up()        return aux    def dequeue(self):        aux=self.array[0]        n=self.len()        self.swap(0,n-1)        self.change_len(n-1)        self.array=self.array[:-1]        self.top_down(0)        return aux    def print(self):        i=0        aux=2        l=self.len()        while i < l :            if i+1 == aux:                print('\n', end='')                aux=aux*2            print(self.array[i], end=' ')            i=i+1if __name__ == "__main__":    a=heap('min')    n=0    while n < 9999:        a.append(random.randint(-213,213))        n=n+1        if n%4:            a.dequeue()    a.print()